{"config":{"lang":["it"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"activity/","title":"Diagrammi delle attivit\u00e0","text":"<pre><code>flowchart TB\n    A@{ shape: sm-circ } --&gt; B(Lancio Steam)\n    B --&gt; C(Login Steam)\n    C --&gt; D@{ shape: diamond, label: \"Seleziono Nerd's Tale\" }\n    D --&gt; |Si| E(Lancio Nerd's Tale)\n    D --&gt; |No| Z@{ shape: framed-circle }\n    E --&gt; F@{ shape: fork }\n    F --&gt; G(Gioco Nerd's Tale)\n    F --&gt; H(Raccolta Statistiche)\n    G --&gt; I@{ shape: fork }\n    H --&gt; I\n    I --&gt; L(Chiudo Nerd's Tale)\n    L --&gt; Z</code></pre>"},{"location":"classes/","title":"Diagramma delle classi","text":"<pre><code>classDiagram\n    class GestoreCombattimento {\n        + IniziaCombattimento()\n        + TerminaCombattimento()\n    }\n\n    class Personaggio {\n        - nome: string\n        - saluteAttuale: int\n        - saluteMassima: int\n        --\n        + FaiDanno(quantitaSalute)\n        + SubisciDanno(quantitaSalute)\n        + Cura(quantitaSalute)\n    }\n\n    class PersonaggioGiocatore\n    class PersonaggioNemico\n\n    Personaggio &lt;|-- PersonaggioGiocatore : Eredita\n    Personaggio &lt;|-- PersonaggioNemico : Eredita\n\n    class Statistiche {\n        - forza: int\n        - difesa: int\n        - agilita: int\n    }\n\n    class Oggetto {\n        - nome: string\n        - descrizione: string\n    }\n\n    class Equipaggiamento {\n        - nome: string\n    }\n\n    class Pozione {\n        + saluteCurata: int\n    }\n\n    class Arma {\n        - dannoInflitto: int\n    }\n\n    class Armatura {\n        - dannoAssorbito: int\n    }\n\n    Arma &lt;|-- Equipaggiamento : Eredita\n    Armatura &lt;|-- Equipaggiamento : Eredita\n\n    Oggetto &lt;|-- Equipaggiamento : \u00e8 un\n    Oggetto &lt;|-- Pozione : \u00e8 un\n\n    class Inventario {\n        + oggetti: Map&lt;Oggetto, int&gt;\n        --\n        + AggiungiOggetto(item, quantity)\n        + RimuoviOggetto(item, quantity)\n    }\n\n    GestoreCombattimento -- PersonaggioGiocatore : gestisce\n    Personaggio -- Statistiche : ha\n    Personaggio -- Inventario : ha\n    PersonaggioGiocatore -- Equipaggiamento : equipaggia\n    Inventario -- Oggetto : contiene\n    PersonaggioNemico -- Oggetto : droppa\n\n    Equipaggiamento -- Statistiche : modifica</code></pre>"},{"location":"sequence/","title":"Diagrammi di sequenza","text":""},{"location":"sequence/#diagramma-di-sequenza-per-il-caso-duso-gestione-combattimento","title":"Diagramma di sequenza per il caso d'uso \"Gestione combattimento\"","text":"<ol> <li>Si determinano i partecipanti al diagramma di sequenza.</li> <li>Si stabiliscono la prima parte del flusso. In particolare:     a. Il client rileva la collisione tra sprite del personaggio e del nemico.     b. Se ci\u00f2 avviene, si scatena il combattimento, ed il controllo passa al gestore del combattimento. Contestualmente, viene mostrata l'interfaccia di combattimento.</li> <li>Si entra nel loop di combattimento, che dura finch\u00e9 questo \u00e8 attivo.</li> <li>Viene controllato il turno.     a. Se \u00e8 il turno del giocatore, il giocatore sceglie l'azione dall'UI, il sistema calcola il risultato, l'UI viene aggiornata, ed il turno termina.     b. Se \u00e8 il turno del nemico, l'IA sceglie l'azione, il sistema calcola il risultato, l'UI viene aggiornata, ed il turno termina.</li> <li>Viene controllato il termine del combattimento.     a. Il combattimento \u00e8 terminato con esito vittoria.     b. Il combattimento \u00e8 terminato con esito sconfitta.     c. Il combattimento prosegue.</li> </ol> <pre><code>sequenceDiagram\n    participant UI as Giocatore (Interfaccia)\n    participant Client as Client di Gioco\n    participant CM as Gestore Combattimento\n    participant PC as Personaggio Giocatore\n    participant EC as Personaggio Nemico\n\n    Note over UI, Client: Giocatore si muove sulla mappa\n\n    Client-&gt;&gt;Client: Rileva Collisione(PC, EC)\n    activate Client\n    Client-&gt;&gt;CM: IniziaCombattimento(PC, EC)\n    activate CM\n    Note right of CM: Prepara stato battaglia, UI, ordine turni\n    Client-&gt;&gt;UI: Mostra Schermata Combattimento()\n    deactivate Client\n\n    loop Finch\u00e8 Combattimento Attivo\n        CM-&gt;&gt;CM: Determina Prossimo Turno()\n\n        alt Turno Giocatore\n            CM-&gt;&gt;UI: Mostra Menu Azioni()\n            UI-&gt;&gt;CM: SelezionaAzione(azione, bersaglioID)\n            CM-&gt;&gt;PC: EseguiAzione(azione, bersaglioID)\n            activate PC\n            Note right of PC: Calcola danno/effetti\n            PC--&gt;&gt;CM: RisultatoAzione(danno, status)\n            deactivate PC\n            CM-&gt;&gt;UI: AggiornaUI(danno, status, animazioni)\n\n        else Turno Nemico\n            CM-&gt;&gt;EC: Richiedi Azione IA()\n            activate EC\n            Note right of EC: IA sceglie azione e bersaglio\n            EC--&gt;&gt;CM: AzioneScelta(azione, bersaglioID)\n            deactivate EC\n            CM-&gt;&gt;PC: ApplicaEffettoAzioneNemica(azione)\n            activate PC\n            PC--&gt;&gt;CM: RisultatoAzione(danno, status)\n            deactivate PC\n            CM-&gt;&gt;UI: AggiornaUI(danno, status, animazioni)\n        end\n\n        CM-&gt;&gt;CM: Controlla Fine Combattimento()\n        Note right of CM: Verifica HP di tutti i partecipanti\n        alt Condizione Fine Raggiunta\n                CM-&gt;&gt;Client: TerminaCombattimento(esito, ricompense?)\n                activate Client\n                alt Esito Vittoria\n                    Client-&gt;&gt;Client: AssegnaRicompense(XP, Oro, Oggetti)\n                    Client-&gt;&gt;UI: Mostra Schermata Vittoria()\n                else Esito Sconfitta\n                    Client-&gt;&gt;UI: Mostra Schermata Sconfitta()\n                    Client-&gt;&gt;Client: Gestisci Sconfitta() // Es. Carica ultimo save\n                end\n                deactivate Client\n                deactivate CM\n        end\n    end\n\n    Client-&gt;&gt;UI: Torna alla Mappa Mondo()</code></pre>"},{"location":"use_cases/","title":"Diagrammi dei casi d'uso","text":"<pre><code>flowchart LR\n    player((Giocatore))\n    player --&gt; B\n    player --&gt; C\n    player --&gt; D\n    data((Analytics))\n    data --&gt; E\n    subgraph Nerd's Tale\n    B(Gestione Combattimento)\n    C(Gestione quest)\n    D(Gestione inventario)\n    E(Report statistiche)\n    end</code></pre>"}]}